WeAudit Documentation Overview
==============================

WeAudit is a cutting-edge platform designed to streamline the auditing process of generative AI models, specifically focusing on ethical implications and bias detection. Our tool integrates various technologies, including AWS services, Replicate for image generation, and machine learning model monitoring.

Purpose
-------

The main goal of WeAudit is to provide researchers, developers, and auditors with the tools necessary to ensure that AI models are used responsibly and ethically. By providing a detailed analysis of model behaviors, WeAudit helps in identifying and mitigating biases in AI-generated images and data.

High-level Architecture
-----------------------

WeAudit's architecture is designed to support scalable, secure, and efficient operations. This section outlines the key architectural components and their interactions.

Description of Applications
---------------------------

1. **Taiga**: Tool for comparison of images generated by stable-diffusion model but different prompts.
2. **Ouroboros**: Tool for mass generation of images for auditing.
3. **Mirage**: Tool for comparison of images generated by different text-to-image models.
4. **Llava**: Tool that leverages the Llava model to classify images based on their content.

Description of General Components
---------------------------------

1. **AWS Lambda**: Manages the backend logic and processes, facilitating the execution of functions in response to events.
2. **AWS S3 Buckets**: Stores images and data securely, ensuring data is accessible and persistent.
3. **DynamoDB**: Handles metadata storage and management, providing fast and scalable database solutions.
4. **Replicate**: Powers the image generation, using various AI models to produce images based on textual prompts.
5. **Amazon Lightsail**: Provides virtual servers for hosting web applications, ensuring reliable and scalable web services.

Flow of Data
------------

- **Input**: Users interact with the WeAudit platform through the web interface or API, submitting prompts for image generation.
- **Processing**: Prompts are processed using Replicate; generated images are saved in AWS S3 Buckets and metadata is stored in DynamoDB.
- **Output**: An array of the generated images URLs is returned to the web interface to be displayed.


Below is a structured overview of all major sections included in this documentation, each link will take you to more detailed information:

Overview
--------

- :doc:`Introduction <../overview/index>`

Deployment
----------

- :doc:`AWS Deployment <../deployment/aws_deployment>` (includes Lambda, S3, DynamoDB, Lightsail)
- :doc:`Discourse Deployment <../deployment/discourse_deployment>`
- :doc:`Security and Credentials <../deployment/security_credentials>`

Image Generation
----------------

- :doc:`Replicate Usage <../image_generation/replicate_usage>`
- :doc:`Billing and Usage Limits <../image_generation/billing_usage_limits>`
- :doc:`Image Caching and Deletion <../image_generation/image_caching_deletion>`

Tool Integrations
-----------------

- :doc:`Mirage <../tool_integrations/mirage>`
- :doc:`Taiga <../tool_integrations/taiga>`
- :doc:`Ouroboros <../tool_integrations/ouroboros>`
- :doc:`Llava <../tool_integrations/llava>`

API Endpoints
-------------

- :doc:`Flask Application Endpoints <../api_endpoints/flask_application_endpoints>`
- :doc:`Replicate Integration <../api_endpoints/replicate_integration>`
- :doc:`DynamoDB Integration <../api_endpoints/dynamodb_integration>`
- :doc:`S3 Integration <../api_endpoints/s3_integration>`
- :doc:`CORS Configuration <../api_endpoints/cors_configuration>`

Troubleshooting and Common Issues
---------------------------------

- :doc:`Deployment Issues <../troubleshooting/deployment_issues>`
- :doc:`API Usage Problems <../troubleshooting/api_usage_problems>`
- :doc:`Security Concerns <../troubleshooting/security_concerns>`

Appendix and Additional Resources
---------------------------------

- :doc:`Links to external resources <../appendix/links>`
- :doc:`Glossary of Terms <../appendix/glossary>`

